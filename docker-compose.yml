services:
  mongo-db:
    container_name: mongo-db
    image: mongo:8.0
    restart: on-failure
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  broker:
    image: confluentinc/cp-kafka:7.8.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - app-network

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - broker
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
    networks:
      - app-network

  users-rest-api:
    build:
      context: .
      dockerfile: .docker/users_rest_api/Dockerfile
    container_name: users-rest-api
    ports:
      - "3000:3000"
    # command: tail -f /dev/null
    restart: on-failure
    environment:
      NODE_ENV: 'production'
      MONGODB_URI: 'mongodb://mongo-db:27017/magmamath'
      KAFKA_BROKER_ADDRESS: 'broker:29092'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - broker
      - mongo-db
    networks:
      - app-network

  notifications-consumer:
    build:
      context: .
      dockerfile: .docker/notifications_consumer/Dockerfile
    container_name: notifications-consumer
    # command: tail -f /dev/null
    restart: on-failure
    environment:
      NODE_ENV: 'production'
      MONGODB_URI: 'mongodb://mongo-db:27017/magmamath'
      KAFKA_BROKER_ADDRESS: 'broker:29092'
    depends_on:
      - broker
      - users-rest-api
    networks:
      - app-network

volumes:
  mongo_data:

networks:
  app-network:
    driver: bridge
